# load_module /etc/nginx/modules/ngx_http_geoip2_module.so;
load_module /usr/lib/nginx/modules/ngx_http_geoip2_module.so;
events {
    worker_connections  1024;
}
http {
    # Trust the X-Forwarded-For header set by Docker Desktop
    set_real_ip_from 192.168.65.1; # Docker Desktop default network
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    geoip2 /etc/GeoLite2-Country.mmdb {
        # auto_reload 5m;
        $geoip2_metadata_country_build metadata build_epoch;
        $geoip2_data_country_code default=US source=$remote_addr country iso_code;
    }
    
    map $geoip2_data_country_code $backend {
        default default_server;
        US usa_server;
        UA ua_server;
    }
    
    upstream ua_server {
        server 127.0.0.1:8090;
    }
    
    upstream usa_server {
        server 127.0.0.1:8095;
        server 127.0.0.1:8096;
    }
    
    upstream default_server {
        server 127.0.0.1:8085;
    }
    
    upstream backup_server {
        server 127.0.0.1:8086;
    }

    server {
        listen 8080;
        
        # Disable caching
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        location / {
            proxy_pass http://$backend;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        
            # If all ua_servers fail, try backup_upstream
            error_page 502 503 = @fallback;
        }
        
        location @fallback {
            proxy_pass http://backup_server;
        }
    }
    
    server {
        listen 8090;
        
        location / {
            return 200 "UA";
            # return 503 "UA FAILED"; # Test Error
        }
    }
    
    server {
        listen 8095;
        
        location / {
            return 200 "USA 1";
        }
    }
    
    server {
        listen 8096;
        
        location / {
            return 200 "USA 2";
        }
    }
    
    server {
        listen 8085;
        
        location / {
            return 200 "Hey there [${geoip2_data_country_code}]!";
        }
    }
    
    server {
        listen 8086;
        
        location / {
            return 200 "Hey there, I'm backup [${geoip2_data_country_code}]!";
        }
    }
}
